# pip install st-star-rating

import streamlit as st
import pandas as pd
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go
from PIL import Image
import io
from streamlit_star_rating import st_star_rating
import os

# data

data = pd.read_excel('ni√±os_prep.xlsx',na_values=[])
data = data.fillna("N/A")


nombres=set(data['Nombre'])



def load_data():
    data_path = 'ni√±os_prep.xlsx'
    data = pd.read_excel(data_path, na_values=[])
    data = data.fillna("N/A")
    return data

# Inicializaci√≥n de la variable de estado si no existe
if 'data' not in st.session_state:
    st.session_state.data = load_data()

# Mostrar botones y manejar la recarga de datos
def show_buttons_and_load_data():
    if st.button("Recargar datos"):
        st.session_state.data = load_data()  # Recarga los datos
        st.success("Datos recargados con √©xito!")

# Mostrar los datos en Streamlit
def display_data():
    st.write(st.session_state.data)

def main():
    #st.sidebar.title("Men√∫ de Navegaci√≥n")
    show_buttons_and_load_data()
    # display_data()

if __name__ == "__main__":
    main()

col1, col2 = st.columns([1, 3])  # Ajusta los valores para cambiar el tama√±o relativo de las columnas

#st.sidebar.image('logo.jpg', width=200)
st.sidebar.title("Men√∫ de Navegaci√≥n")

menu_opciones = {
    "explorar": "üîç Explorar ni√±o/a",
    "registrar": "üìù Registrar datos",
    "foto": "üì∏ A√±adir foto"
}

# Mostrar opciones con emojis en el sidebar
menu_opcion = st.sidebar.radio(
    "Selecciona funci√≥n: ",#üëâ
    options=list(menu_opciones.keys()),  # Opciones internas
    format_func=lambda x: menu_opciones[x],  # Mostrar con emojis
    key="menu"
)

if menu_opcion == "foto":

    with col1:
        st.image('logo.jpg')  # A√±adiremos la imagen de los ni√±os 

    # Colocar el t√≠tulo en la segunda columna
    with col2:
        st.write(f"""
        #  Fotograf√≠as
        """)
        
    uploaded_file = st.file_uploader("Sube una foto:", type=["jpg", "jpeg", "png"])
    st.caption("‚ö†Ô∏è El nombre de la foto debe de corresponder con el nombre del ni√±o/a.")


    if uploaded_file is not None:
        image = Image.open(uploaded_file)
                
        st.image(image, caption="Foto subida", width=150)

        # with open("foto_subida.jpg", "wb") as f:
        #     f.write(uploaded_file.getbuffer())
            
    st.text(' ')

    if st.button("Guardar registro"):
            
        try: 
                    # foto
            save_path = "fotos"  
            if not os.path.exists(save_path):
                os.makedirs(save_path)  # Crear la ruta si no existe
                    
                    # Guardar la imagen con su nombre original
            image.save(os.path.join(save_path, uploaded_file.name))
            st.success("La foto se ha guardado correctamente.")

                    # datos
        except: 
            st.warning('No se pudieron guardar los cambios, a√±ada la foto correctamente.', icon="‚ö†Ô∏è")
            

elif menu_opcion == "explorar":
    opcion = st.sidebar.selectbox(
        "Elige un/a Ni√±@: ", # refinar esto con Misael
        nombres
    )
    
    ni√±x = data[(data['Nombre'] == opcion)]# & (data['A√±o'] == 2025)


    # Colocar la imagen en la primera columna
    with col1:
        st.image('logo.jpg')  # A√±adiremos la imagen de los ni√±os 

    # Colocar el t√≠tulo en la segunda columna
    
    with col2:

        st.write(f"""
        #  {opcion}
        """)
        try:
            st.write(f"""
            {ni√±x['Sexo'].values[0]}, {int(ni√±x['Edad'].values[0]+1)} a√±os, nacid@ en {int(ni√±x['Fecha de nacimiento'].values[0])}
            """)
        except:
            st.write(f"""
            {ni√±x['Sexo'].values[0]}
            """)

    if 'selected' not in st.session_state:
        st.session_state.selected = None
        
 
    col1, col2, col3,col4= st.columns([3, 3, 3,3])  # Ajusta los valores para cambiar el tama√±o relativo de las columnas

    with col1:
        if st.button("üè† Historia cl√≠nica y antecedentes"):
            st.session_state.selected = "familiares"  # Cambia el estado a "familiares"
    with col2:
        if st.button("üìè Antropometr√≠a y crecimiento"):
            st.session_state.selected = "creci"  # Cambia el estado a "varianza"
    with col3:
        if st.button("üíâ Vacunas"):
            st.session_state.selected = "vacunas"  # Cambia el estado a "faltantes"
    with col4:
        if st.button("üß† Psicolog√≠a y Comportamiento"):
            st.session_state.selected = "psico"  # Cambia el estado a "faltantes"

    
    col1, col2, col3,col4 = st.columns([3, 3, 3, 3])  # Ajusta los valores para cambiar el tama√±o relativo de las columnas

    with col1:

        if st.button("üëÅÔ∏è Oftalmolog√≠a"):
            st.session_state.selected = "oftalmo"  # Cambia el estado a "familiares"
    with col2:
        if st.button("üëÇ Otorrino"):
            st.session_state.selected = "oto"  # Cambia el estado a "varianza"
    with col3:
        if st.button("ü¶∑ Bucal"):
            st.session_state.selected = "bucal"  # Cambia el estado a "faltantes"
    with col4:
        if st.button("ü´Ä Auscultaci√≥n"):
            st.session_state.selected = "auscu"  # Cambia el estado a "faltantes"

    col1, col2, col3,col4 = st.columns([3, 3, 3, 3])
    with col1:
        if st.button("üñêÔ∏è Dermatolog√≠a"):
            st.session_state.selected = "derma"  # Cambia el estado a "faltantes"
    with col2:
        if st.button("üìã Valoraci√≥n final"):
            st.session_state.selected = "val"  # Cambia el estado a "familiares"
    

    # Muestra contenido basado en el estado seleccionado
    if st.session_state.selected == "familiares":
        
        ni√±x_familiares = ni√±x[['A√±o','Hogar', 'Unidad Familiar', 'Antecedentes M√©dicos', 'Antecedentes Familiares']]
        ni√±x_familiares = ni√±x_familiares.reset_index(drop=True)

        tabla1 = go.Figure(data=[go.Table(
            header=dict(
                values=list(ni√±x_familiares.columns),  # Usar los nombres de las columnas del DataFrame
                fill_color='#1a75ce',  # Color del fondo de los encabezados
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=14, color='white'),  # Estilo de fuente para el encabezado
                height=50
            ),
            cells=dict(
                values=[ni√±x_familiares[col] for col in ni√±x_familiares.columns],  # Usar los valores de las columnas del DataFrame
                fill_color='white',  # Color del fondo de las celdas
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=13, color='black'),  # Tama√±o y color del texto para las celdas
                height=50
            )
        )])
        tabla1.update_layout(
            height=250,  # Ajusta la altura de la tabla
            margin=dict(t=30, b=0)
        )
        # Mostrar la tabla en Streamlit
        st.plotly_chart(tabla1, use_container_width=True)
        

        ni√±x_familiares = ni√±x[['A√±o','Medicaci√≥n', 'Alergias', 'Comentarios Alergias',
       'Comentarios Medicaci√≥n']]
        ni√±x_familiares = ni√±x_familiares.reset_index(drop=True)

        tabla2 = go.Figure(data=[go.Table(
            header=dict(
                values=list(ni√±x_familiares.columns),  # Usar los nombres de las columnas del DataFrame
                fill_color='#1a75ce',  # Color del fondo de los encabezados
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=14, color='white'),  # Estilo de fuente para el encabezado
                height=30
            ),
            cells=dict(
                values=[ni√±x_familiares[col] for col in ni√±x_familiares.columns],  # Usar los valores de las columnas del DataFrame
                fill_color='white',  # Color del fondo de las celdas
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=13, color='black'),  # Tama√±o y color del texto para las celdas
                height=30
            )
        )])

        tabla2.update_layout(
            height=250,  # Ajusta la altura de la tabla
            margin=dict(t=0, b=0)
        )
        # Mostrar la tabla en Streamlit
        st.plotly_chart(tabla2, use_container_width=True)

        if ni√±x['Sexo'].values[0]=='Femenino':

            ni√±x_familiares = ni√±x[['A√±o','Menarquia', 'Comentarios Menarqu√≠a']]
            ni√±x_familiares = ni√±x_familiares.reset_index(drop=True)

            tabla3 = go.Figure(data=[go.Table(
                header=dict(
                    values=list(ni√±x_familiares.columns),  # Usar los nombres de las columnas del DataFrame
                    fill_color='#1a75ce',  # Color del fondo de los encabezados
                    align='center',  # Alineaci√≥n de los textos
                    font=dict(size=14, color='white'),  # Estilo de fuente para el encabezado
                    height=30
                ),
                cells=dict(
                    values=[ni√±x_familiares[col] for col in ni√±x_familiares.columns],  # Usar los valores de las columnas del DataFrame
                    fill_color='white',  # Color del fondo de las celdas
                    align='center',  # Alineaci√≥n de los textos
                    font=dict(size=13, color='black'),  # Tama√±o y color del texto para las celdas
                    height=30
                )
            )])

            tabla3.update_layout(
                height=250,  # Ajusta la altura de la tabla
                margin=dict(t=0, b=0)
            )
            # Mostrar la tabla en Streamlit
            st.plotly_chart(tabla3, use_container_width=True)



    elif st.session_state.selected == "psico":
        ni√±x5 = ni√±x[(data['A√±o'] == 2025)]# & 
        try:
            caritas = ["üò†", "üòü", "üòê", "üòä", "üòÅ"]
            categorias = [ni√±x5['Autoestima/autoimagen'].values[0], ni√±x5['Relacional'].values[0], ni√±x5['Organizaci√≥n'].values[0], ni√±x5['Transtorno del sue√±o'].values[0], ni√±x5['Ansiedad'].values[0],   ni√±x5['Alimentaci√≥n'].values[0], ni√±x5['Estado An√≠mico'].values[0], ni√±x5['Ideaci√≥n Autom√≠tica'].values[0]]  # Ejemplo de valores
            categorias_labels = ['Autoestima','Relacional','Organizaci√≥n','Transtorno del sue√±o','Ansiedad','Alimentaci√≥n', 'Estado An√≠mico', 'Ideaci√≥n Autom√≠tica' ]  # Ejemplo de valores
            
            # Mapear valores a caritas y colores
            def asignar_carita_y_color(valor):
                if valor == 1:
                    return "üò†", "#FF6F61"
                elif valor == 2:
                    return "üòü", "#FFB347"
                elif valor == 3:
                    return "üòê", "#FFF176"
                elif valor == 4:
                    return "üòä", "#AED581"
                elif valor == 5:
                    return "üòÅ", "#81C784"
                else:
                    return "‚ùì", "#D3D3D3"  # Default para valores fuera de rango

    # Aplicar la funci√≥n a los valores de las categor√≠as
            caritas = []
            colores = []
            for valor in categorias:
                carita, color = asignar_carita_y_color(int(valor))
                caritas.append(carita)
                colores.append(color)

            # Crear el gr√°fico de barras
            fig = go.Figure()

            fig.add_trace(go.Bar(
                x=categorias_labels,  # Etiquetas del eje X
                y=categorias,  # Valores num√©ricos para las barras
                text=caritas,  # Caritas din√°micas basadas en los valores
                textposition='outside',
                marker=dict(color=colores)  # Colores din√°micos basados en los valores
            ))

            # Configurar dise√±o del gr√°fico
            fig.update_layout(
                xaxis=dict(title="Categor√≠as"),  # T√≠tulo del eje X
                yaxis=dict(title="Valores"),  # T√≠tulo del eje Y
                height=500  # Altura del gr√°fico
            )

            st.plotly_chart(fig)
        except:
            pass


        ni√±x_familiares = ni√±x[['A√±o','Comentarios Psicolog√≠a']]
        ni√±x_familiares = ni√±x_familiares.reset_index(drop=True)


        tabla4 = go.Figure(data=[go.Table(
            header=dict(
                values=list(ni√±x_familiares.columns),  # Usar los nombres de las columnas del DataFrame
                fill_color='#1a75ce',  # Color del fondo de los encabezados
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=14, color='white'),  # Estilo de fuente para el encabezado
                height=30
            ),
            cells=dict(
                values=[ni√±x_familiares[col] for col in ni√±x_familiares.columns],  # Usar los valores de las columnas del DataFrame
                fill_color='white',  # Color del fondo de las celdas
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=13, color='black'),  # Tama√±o y color del texto para las celdas
                height=30
            )
        )])
        tabla4.update_layout(
            height=250,  # Ajusta la altura de la tabla
            margin=dict(t=30, b=0)
        )
        # Mostrar la tabla en Streamlit
        st.plotly_chart(tabla4, use_container_width=True)

    elif st.session_state.selected == "bucal":
        ni√±x_familiares = ni√±x[['A√±o', 'Caries', 'Comentarios Higiene Bucal', 'Urgente']]
        ni√±x_familiares = ni√±x_familiares.reset_index(drop=True)

        tabla1 = go.Figure(data=[go.Table(
            header=dict(
                values=list(ni√±x_familiares.columns),  # Usar los nombres de las columnas del DataFrame
                fill_color='#1a75ce',  # Color del fondo de los encabezados
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=14, color='white'),  # Estilo de fuente para el encabezado
                height=30
            ),
            cells=dict(
                values=[ni√±x_familiares[col] for col in ni√±x_familiares.columns],  # Usar los valores de las columnas del DataFrame
                fill_color='white',  # Color del fondo de las celdas
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=13, color='black'),  # Tama√±o y color del texto para las celdas
                height=30
            )
        )])
        tabla1.update_layout(
            height=250,  # Ajusta la altura de la tabla
            margin=dict(t=30, b=0)
        )
        # Mostrar la tabla en Streamlit
        st.plotly_chart(tabla1, use_container_width=True)

    elif st.session_state.selected == "derma":

        ni√±x_familiares = ni√±x[['A√±o','Abdomen', 'Comentarios Abdomen' ]]
        ni√±x_familiares = ni√±x_familiares.reset_index(drop=True)

        tabla1 = go.Figure(data=[go.Table(
            header=dict(
                values=list(ni√±x_familiares.columns),  # Usar los nombres de las columnas del DataFrame
                fill_color='#1a75ce',  # Color del fondo de los encabezados
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=14, color='white'),  # Estilo de fuente para el encabezado
                height=30
            ),
            cells=dict(
                values=[ni√±x_familiares[col] for col in ni√±x_familiares.columns],  # Usar los valores de las columnas del DataFrame
                fill_color='white',  # Color del fondo de las celdas
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=13, color='black'),  # Tama√±o y color del texto para las celdas
                height=30
            )
        )])
        tabla1.update_layout(
            height=250,  # Ajusta la altura de la tabla
            margin=dict(t=30, b=0)
        )
        # Mostrar la tabla en Streamlit
        st.plotly_chart(tabla1, use_container_width=True)

        ni√±x_familiares3 = ni√±x[['A√±o', 'Piojos', 'Piel', 'Lesiones', 'Tatuajes']]
        ni√±x_familiares3 = ni√±x_familiares3.reset_index(drop=True)

        tabla3 = go.Figure(data=[go.Table(
            header=dict(
                values=list(ni√±x_familiares3.columns),  # Usar los nombres de las columnas del DataFrame
                fill_color='#1a75ce',  # Color del fondo de los encabezados
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=14, color='white'),  # Estilo de fuente para el encabezado
                height=30
            ),
            cells=dict(
                values=[ni√±x_familiares3[col] for col in ni√±x_familiares3.columns],  # Usar los valores de las columnas del DataFrame
                fill_color='white',  # Color del fondo de las celdas
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=13, color='black'),  # Tama√±o y color del texto para las celdas
                height=30
            )
        )])

        tabla3.update_layout(
            height=250,  # Ajusta la altura de la tabla
            margin=dict(t=0, b=0)
        )
        # Mostrar la tabla en Streamlit
        st.plotly_chart(tabla3, use_container_width=True)

    elif st.session_state.selected == "auscu":
        ni√±x_familiares = ni√±x[['A√±o','Coraz√≥n', 'Comentarios Cardiaca' ]]
        ni√±x_familiares = ni√±x_familiares.reset_index(drop=True)

        tabla1 = go.Figure(data=[go.Table(
            header=dict(
                values=list(ni√±x_familiares.columns),  # Usar los nombres de las columnas del DataFrame
                fill_color='#1a75ce',  # Color del fondo de los encabezados
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=14, color='white'),  # Estilo de fuente para el encabezado
                height=30
            ),
            cells=dict(
                values=[ni√±x_familiares[col] for col in ni√±x_familiares.columns],  # Usar los valores de las columnas del DataFrame
                fill_color='white',  # Color del fondo de las celdas
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=13, color='black'),  # Tama√±o y color del texto para las celdas
                height=30
            )
        )])
        tabla1.update_layout(
            height=250,  # Ajusta la altura de la tabla
            margin=dict(t=30, b=0)
        )
        # Mostrar la tabla en Streamlit
        st.plotly_chart(tabla1, use_container_width=True)

        ni√±x_familiares1 = ni√±x[['A√±o','Pulm√≥n','Comentarios Pulm√≥n']]
        ni√±x_familiares1 = ni√±x_familiares1.reset_index(drop=True)

        tabla2 = go.Figure(data=[go.Table(
            header=dict(
                values=list(ni√±x_familiares1.columns),  # Usar los nombres de las columnas del DataFrame
                fill_color='#1a75ce',  # Color del fondo de los encabezados
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=14, color='white'),  # Estilo de fuente para el encabezado
                height=30
            ),
            cells=dict(
                values=[ni√±x_familiares1[col] for col in ni√±x_familiares1.columns],  # Usar los valores de las columnas del DataFrame
                fill_color='white',  # Color del fondo de las celdas
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=13, color='black'),  # Tama√±o y color del texto para las celdas
                height=30
            )
        )])

        tabla2.update_layout(
            height=250,  # Ajusta la altura de la tabla
            margin=dict(t=0, b=0)
        )
        # Mostrar la tabla en Streamlit
        st.plotly_chart(tabla2, use_container_width=True)

        ni√±x_familiares3 = ni√±x[['A√±o','Adams', 'Comentarios Adams']]
        ni√±x_familiares3 = ni√±x_familiares3.reset_index(drop=True)

        tabla3 = go.Figure(data=[go.Table(
            header=dict(
                values=list(ni√±x_familiares3.columns),  # Usar los nombres de las columnas del DataFrame
                fill_color='#1a75ce',  # Color del fondo de los encabezados
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=14, color='white'),  # Estilo de fuente para el encabezado
                height=30
            ),
            cells=dict(
                values=[ni√±x_familiares3[col] for col in ni√±x_familiares3.columns],  # Usar los valores de las columnas del DataFrame
                fill_color='white',  # Color del fondo de las celdas
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=13, color='black'),  # Tama√±o y color del texto para las celdas
                height=30
            )
        )])

        tabla3.update_layout(
            height=250,  # Ajusta la altura de la tabla
            margin=dict(t=0, b=0)
        )
        # Mostrar la tabla en Streamlit
        st.plotly_chart(tabla3, use_container_width=True)


    elif st.session_state.selected == "oto":
        ni√±x_familiares = ni√±x[['A√±o','Pendientes y Perforaciones', 'Audici√≥n', 'Comentarios Audici√≥n', 'Otoscopia', 'Comentarios Otoscopia' ]]
        ni√±x_familiares = ni√±x_familiares.reset_index(drop=True)

        tabla1 = go.Figure(data=[go.Table(
            header=dict(
                values=list(ni√±x_familiares.columns),  # Usar los nombres de las columnas del DataFrame
                fill_color='#1a75ce',  # Color del fondo de los encabezados
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=14, color='white'),  # Estilo de fuente para el encabezado
                height=30
            ),
            cells=dict(
                values=[ni√±x_familiares[col] for col in ni√±x_familiares.columns],  # Usar los valores de las columnas del DataFrame
                fill_color='white',  # Color del fondo de las celdas
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=13, color='black'),  # Tama√±o y color del texto para las celdas
                height=30
            )
        )])
        tabla1.update_layout(
            height=250,  # Ajusta la altura de la tabla
            margin=dict(t=30, b=0)
        )
        # Mostrar la tabla en Streamlit
        st.plotly_chart(tabla1, use_container_width=True)


    elif st.session_state.selected == "creci":
        ni√±x_familiares = ni√±x[['A√±o','Peso (Kg)', 'Talla (Cm)','IMC', 'Per√≠metro Branquial']]
        ni√±x_familiares = ni√±x_familiares.reset_index(drop=True)

        tabla1 = go.Figure(data=[go.Table(
            header=dict(
                values=list(ni√±x_familiares.columns),  # Usar los nombres de las columnas del DataFrame
                fill_color='#1a75ce',  # Color del fondo de los encabezados
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=14, color='white'),  # Estilo de fuente para el encabezado
                height=30
            ),
            cells=dict(
                values=[ni√±x_familiares[col] for col in ni√±x_familiares.columns],  # Usar los valores de las columnas del DataFrame
                fill_color='white',  # Color del fondo de las celdas
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=13, color='black'),  # Tama√±o y color del texto para las celdas
                height=30
            )
        )])
        tabla1.update_layout(
            height=250,  # Ajusta la altura de la tabla
            margin=dict(t=30, b=0)
        )
        # Mostrar la tabla en Streamlit
        st.plotly_chart(tabla1, use_container_width=True)

    elif st.session_state.selected == "vacunas":
            ni√±x5 = ni√±x[(data['A√±o'] == 2025)]# & 
            ni√±x_familiares = ni√±x5[['Vacunas']]
 
            tabla1 = go.Figure(data=[go.Table(
            header=dict(
                values=list(ni√±x_familiares.columns),  # Usar los nombres de las columnas del DataFrame
                fill_color='#1a75ce',  # Color del fondo de los encabezados
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=14, color='white'),  # Estilo de fuente para el encabezado
                height=30
            ),
            cells=dict(
                values=[ni√±x_familiares[col] for col in ni√±x_familiares.columns],  # Usar los valores de las columnas del DataFrame
                fill_color='white',  # Color del fondo de las celdas
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=13, color='black'),  # Tama√±o y color del texto para las celdas
                height=30
                )
            )])
            tabla1.update_layout(
                height=250,  # Ajusta la altura de la tabla
                margin=dict(t=30, b=0)
            )
            # Mostrar la tabla en Streamlit
            st.plotly_chart(tabla1, use_container_width=True)

    elif st.session_state.selected == "oftalmo":
            ni√±x_familiares = ni√±x[['A√±o','Oftalmolog√≠a', 'Comentarios Oftalmolog√≠a' ]]
            ni√±x_familiares = ni√±x_familiares.reset_index(drop=True)
 
            tabla1 = go.Figure(data=[go.Table(
            header=dict(
                values=list(ni√±x_familiares.columns),  # Usar los nombres de las columnas del DataFrame
                fill_color='#1a75ce',  # Color del fondo de los encabezados
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=14, color='white'),  # Estilo de fuente para el encabezado
                height=30
            ),
            cells=dict(
                values=[ni√±x_familiares[col] for col in ni√±x_familiares.columns],  # Usar los valores de las columnas del DataFrame
                fill_color='white',  # Color del fondo de las celdas
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=13, color='black'),  # Tama√±o y color del texto para las celdas
                height=30
                )
            )])
            tabla1.update_layout(
                height=250,  # Ajusta la altura de la tabla
                margin=dict(t=30, b=0)
            )
            # Mostrar la tabla en Streamlit
            st.plotly_chart(tabla1, use_container_width=True)

    elif st.session_state.selected == "val":
            ni√±x5 = ni√±x[(ni√±x['A√±o'] == 2025)]# & 
            ni√±x_familiares = ni√±x5[['Observaciones', 'Revaluar']]
 
            tabla1 = go.Figure(data=[go.Table(
            header=dict(
                values=list(ni√±x_familiares.columns),  # Usar los nombres de las columnas del DataFrame
                fill_color='#1a75ce',  # Color del fondo de los encabezados
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=14, color='white'),  # Estilo de fuente para el encabezado
                height=30
            ),
            cells=dict(
                values=[ni√±x_familiares[col] for col in ni√±x_familiares.columns],  # Usar los valores de las columnas del DataFrame
                fill_color='white',  # Color del fondo de las celdas
                align='center',  # Alineaci√≥n de los textos
                font=dict(size=13, color='black'),  # Tama√±o y color del texto para las celdas
                height=30
                )
            )])
            tabla1.update_layout(
                height=250,  # Ajusta la altura de la tabla
                margin=dict(t=30, b=0)
            )
            # Mostrar la tabla en Streamlit
            st.plotly_chart(tabla1, use_container_width=True)
    


        
elif menu_opcion == "registrar":
    # Opciones del men√∫
    menu_opciones = {
        "modificar": "Modificar ni√±o/a",
        "nuevo": "A√±adir nuevo/a ni√±o/a",
        "existente": "Actualizar ni√±o/a existente"
    }
    # Crear un radio button para seleccionar la acci√≥n
    menu_seleccion = st.sidebar.radio(
        "",  # Texto vac√≠o
        options=list(menu_opciones.keys()),  # Opciones internas
        format_func=lambda x: menu_opciones[x],  # Mostrar con texto personalizado
        key="menu1"
    )

    # Mostrar logo en la columna 1
    with col1:
        st.image('logo.jpg')  # A√±adir la imagen de los ni√±os

    # Opci√≥n "modificar"
    if menu_seleccion == "modificar":
        with col2:
            st.write(f"""
            # Modificar ni√±o/a
            """)

        file_path = "ni√±os_prep.xlsx"

        if "edited_df" not in st.session_state or "file_timestamp" not in st.session_state:
            st.session_state.edited_df = pd.read_excel(file_path, na_values=[])
            st.session_state.file_timestamp = os.path.getmtime(file_path)

        # Si el archivo ha cambiado, recargarlo autom√°ticamente
        current_timestamp = os.path.getmtime(file_path)
        if current_timestamp > st.session_state.file_timestamp:
            st.session_state.edited_df = pd.read_excel(file_path, na_values=[])
            st.session_state.file_timestamp = current_timestamp

            # Mostrar el editor de datos en Streamlit
        st.markdown('‚ö†Ô∏è Para modificar registros, recuerda hacer clic en el bot√≥n de **Guardar cambios** ‚ö†Ô∏è')
        st.session_state.edited_df = st.data_editor(st.session_state.edited_df, num_rows="dynamic")

            # Bot√≥n para guardar los cambios
        if st.button("Guardar cambios"):
            # Guardar el DataFrame editado en el archivo original            
            st.session_state.edited_df.to_excel('ni√±os_prep.xlsx', index=False)
            st.success("Los cambios se han guardado correctamente.")

    elif menu_seleccion == "nuevo":
        
        with col2:
            st.write(f"""
                    # Fomulario para a√±adir nuevo ni√±o/a:
                    """)
                
        st.markdown('‚ö†Ô∏è Porfavor, rellene todos los datos ‚ö†Ô∏è')

        st.header('üåü Datos Personales')

        col1, col2,col3 = st.columns([3, 0.1,2])  # Ajusta los valores para cambiar el tama√±o relativo de las columnas
        with col1:    
            nombre = st.text_input(
                    "Nombre del ni√±o/a", key="nombre"
            )
        with col3:
            sexo = st.radio(
                    "Selecciona un g√©nero:",
                    options=["Femenino", "Masculino"],
                    
            )
        
        st.text(' ')

        col1,col2,col3 = st.columns([1, 0.1,1])
        with col1:
            edad=st.number_input('Edad: ', step=1,format="%d")
        with col3:
            nacimiento=st.slider("Fecha de nacimiento: ", 2017, 2024, 2025-edad)    
        
        st.text(' ')
                
        hogar = st.text_input(
                    "Hogar: " ,key="hogar"
                )

        st.text(' ')

        unidad_familiar = st.text_input(
                    "Unidad Familiar: ",key="unidad_familiar"
        )
        
        st.text(' ')

        # uploaded_file = st.file_uploader("Sube una foto:", type=["jpg", "jpeg", "png"])
        # st.caption("‚ö†Ô∏è El nombre de la foto debe de corresponder con el nombre del ni√±o/a.")


        # if uploaded_file is not None:
        #     image = Image.open(uploaded_file)
                
        #     st.image(image, caption="Foto subida", width=150)

        #     with open("foto_subida.jpg", "wb") as f:
        #         f.write(uploaded_file.getbuffer())
            
        # st.text(' ')

        st.header('üè† Historia cl√≠nica y antecedentes')
        a_medicos = st.text_area(
            "Antecedentes m√©dicos: ",key="a_medicos"
            " ",
            )
        st.text(' ')

        a_familiares = st.text_area(
                "Antecedentes familiares: ", key="a_familiares"
                " ",
            )
        st.text(' ')

        col1,col2 = st.columns([1,4])
        with col1:  
            alergias = st.radio(
                    "Alergias:",
                    options=["S√≠", "No"],  index=1
                    
            )  
                
        with col2:
            comentarios_alergias = st.text_input(
                    "Comentarios acerca de las alergias: ", key="alergias"
            )
            st.text(' ')

        col1,col2 = st.columns([1,4])
        with col1:  
            medicacion = st.radio(
                    "Medicaci√≥n:",
                    options=["S√≠", "No"],  index=1
                    
            )  
                
        with col2:
            comentarios_medicacion = st.text_input(
                    "Comentarios acerca de la medicaci√≥n: ", key="medicacion"
            )

        st.text(' ')
        if sexo=='Femenino':
            col1,col2 = st.columns([1,4])
            with col1:  
                menarquia = st.radio(
                        "Menarquia:",
                        options=["S√≠", "No"],
                        
                )  
                    
            with col2:
                comentarios_menarquia = st.text_input(
                        "Comentarios acerca de la menarquia: ", key="menarquia"
                )
        else: 
            menarquia='N/A'
            comentarios_menarquia='N/A'
            
        st.text(' ')

        st.header('üìè Antropometr√≠a y crecimiento')
        col1,col2, col3= st.columns([3,3,3])
        with col1:  
            peso=st.number_input('Peso (kg): ', step=0.1, key='peso' )

                
        with col2:
            talla=st.number_input('Talla (cm): ', step=1, key='talla' )
            
        with col3:
            altura_m = talla / 100
            st.text(f'√çndice de masa corporal: ')
            if peso==0 or talla==0:
                imc='N/A'
            else: 
                imc=round(peso / (altura_m ** 2), 2)
            st.markdown(f'{imc}')

        perimetro_b=st.number_input('Per√≠metro branquial: ', step=0.1, key='perimetro_b' )
        
        col1,col2 = st.columns([1,4])
        with col1:  
            genitales = st.radio(
                    "Genitales:",
                    options=["Normales", "Hallazgo"],
                    
            )  
        if genitales=='Hallazgo':   
            with col2:
                comentarios_genitales = st.text_input(
                        "Comentarios acerca de los genitales: ", key="genitales"
                )
        else:
            comentarios_genitales='N/A'
        
        st.text(' ')
        st.header('üíâ Vacunas')
        st.text(' ')

        vacunas = st.text_area(
            "Vacunas: ",key="vacunas"
            " ",
            )
        st.text(' ')
        st.text(' ')

        st.header('üß† Psicolog√≠a y Comportamiento')
        st.text(' ')

        if edad>11:

            st.markdown('Nivel de autoestima: ')
            autoestima=st_star_rating(label='',maxValue = 5, defaultValue = 3, key = "autoestima", emoticons=True)

            st.markdown('Nivel de relacionalidad: ')
            relacional=st_star_rating(label='',maxValue = 5, defaultValue = 3, key = "relacional", emoticons=True)

            st.markdown('Nivel de organizaci√≥n: ')
            organizacion=st_star_rating(label='',maxValue = 5, defaultValue = 3, key = "organizacion", emoticons=True)

            st.markdown('Transtorno del sue√±o: ')
            insomnio=st_star_rating(label='',maxValue = 5, defaultValue = 3, key = "insomnio", emoticons=True)

            st.markdown('Nivel de ansiedad: ')
            ansiedad=st_star_rating(label='',maxValue = 5, defaultValue = 3, key = "ansiedad", emoticons=True)

            st.markdown('Alimentaci√≥n: ')
            alimentacion=st_star_rating(label='',maxValue = 5, defaultValue = 3, key = "alimentacion", emoticons=True)
        
            st.markdown('Estado An√≠mico: ')
            estado_a=st_star_rating(label='',maxValue = 5, defaultValue = 3, key = "estado_a", emoticons=True)

            st.markdown('Ideaci√≥n Autol√≠tica: ')
            ideacion=st_star_rating(label='',maxValue = 5, defaultValue = 3, key = "ideacion", emoticons=True)
        else: 
            autoestima='N/A'
            relacional='N/A'
            organizacion='N/A'
            insomnio='N/A'
            ansiedad='N/A'
            alimentacion='N/A'        
            estado_a='N/A'
            ideacion='N/A'

        col1,col2 = st.columns([1,4])
        with col1:  
            abuso = st.radio(
                    "Abuso:",
                    options=["S√≠", "No", "N/A"], index=2
                    
            )  
                
        with col2:
            comentarios_abuso = st.text_input(
                    "Comentarios: ", key="comentarios_abuso"
            )
            
        st.text(' ')

        comentarios_psicologa = st.text_area(
                "Comentarios psic√≥loga/o: ", key="comentarios_psicologa"
                " ",
        )
        st.text(' ')

        st.header('üëÅÔ∏è Oftalmolog√≠a')
        st.text(' ')
        col1,col2 = st.columns([1,4])
        with col1:  
            ofta = st.radio(
                    "Revisado:",
                    options=["S√≠", "No"],
                    
            )  

        if ofta == 'No':
            with col2:
                comentarios_oftalmo = st.text_input(
                    "Comentarios oftalmolog√≠a: ", key="comentarios_oftalmo"
            )        
        else:
            comentarios_oftalmo='N/A'
            
        

        
            

        st.header('üëÇ Otorrino')
        st.text(' ')
        pendientes = st.radio(
                    "Pendientes: ",
                    options=["S√≠", "No", "N/A"],
                    
            ) 
        col1,col2 = st.columns([1,4])
        with col1:  
            audicion = st.radio(
                    "Audicici√≥n: ",
                    options=["Correcta", "Sordera"],
                    
            )  
        if audicion == 'Sordera':
            
            with col2:
                comentarios_audicion = st.text_input(
                        "Comentarios acerca de la audici√≥n: ", key="comentarios_audicion"
                )
        else: 
            comentarios_audicion='N/A'

        col1,col2 = st.columns([1,4])
        with col1:  
            otoscopia = st.radio(
                    "Otoscopia: ",
                    options=["Correcta", "Tap√≥n"],
                    
            )  
        if otoscopia == 'Tap√≥n':
            
            with col2:
                comentarios_otoscopia = st.text_input(
                        "Comentarios acerca de la otoscopia: ", key="comentarios_otoscopia"
                )
        else: 
            comentarios_otoscopia='N/A'

        st.text(' ')

        st.header('ü¶∑ Bucal')
        st.text(' ')

        col1,col2,col3 = st.columns([1.5,3,1.5])
        with col1:  
            bucal = st.radio(
                    "Bucal: ",
                    options=["Buena higiene bucal", "Caries"],
                    
            )  
        with col2:
                comentarios_bucal = st.text_input(
                        "Comentarios acerca de la higiene bucal: ", key="comentarios_bucal"
                )
        with col3:
                urgente = st.radio(
                        "Urgente: ",
                        options=["S√≠", "No"], index=1
                        
                ) 
            
        
        st.text(' ')

        st.header('ü´Ä Auscultaci√≥n')
        st.text(' ')
        col1,col2 = st.columns([1,4])
        with col1:  
            cardiaca = st.radio(
                    "Cardiaca: ",
                    options=["Correcta", "Hallazgo"],
                    
            )  
        if cardiaca == 'Hallazgo':
            
            with col2:
                comentarios_cardiaca = st.text_input(
                        "Comentarios acerca de la auscultaci√≥n cardiaca: ", key="comentarios_cardiaca"
                )
        else: 
            comentarios_cardiaca='N/A'

        st.text(' ')
        col1,col2 = st.columns([1,4])
        with col1:  
            pulmon = st.radio(
                    "Pulm√≥n: ",
                    options=["Correcto", "Hallazgo"],
                    
            )  
        if pulmon == 'Hallazgo':
            
            with col2:
                comentarios_pulmon = st.text_input(
                        "Comentarios acerca de los pulmones: ", key="comentarios_pulmon"
                )
        else: 
            comentarios_pulmon='N/A'

        st.text(' ')
        col1,col2 = st.columns([1,4])
        with col1:  
            adams = st.radio(
                    "Adams: ",
                    options=["Negativo", "Positivo"],
                    
            )  
        if adams == 'Negativo':
            
            with col2:
                comentarios_adams = st.text_input(
                        "Comentarios Adams: ", key="comentarios_adams"
                )
        else: 
            comentarios_adams='N/A'

        st.header('üñêÔ∏è Dermatolog√≠a')

        st.text(' ')
        col1,col2 = st.columns([1,4])
        with col1:  
            abdomen = st.radio(
                    "Abdomen: ",
                    options=["Correcta", "Hallazgo"],
                    
            )  
        if abdomen == 'Hallazgo':
            
            with col2:
                comentarios_abdomen = st.text_input(
                        "Comentarios acerca de la auscultaci√≥n cardiaca: ", key="comentarios_abdomen"
                )
        else: 
            comentarios_abdomen='N/A'


        st.text(' ')
        col1,col2 = st.columns([1,4])
        with col1:  
            piel = st.radio(
                    "Piel: ",
                    options=["Correcta", "Hallazgo"],
                    
            )  
        if piel == 'Hallazgo':
            col11,col12 = st.columns([4,1])
            
            with col11:
                patologias = st.text_input(
                        "Patolog√≠as: ", key="patlogias"
                )
        else: 
            patologias='N/A'
        
        col13,col23 = st.columns([3,3])
        with col13:
            tatuajes = st.radio(
                        "Tatuajes: ",
                        options=["S√≠", "No"], index=1
                        
                )  
                
        st.text(' ')
        with col23:
            piojos = st.radio(
                        "Piojos: ",
                        options=["S√≠", "No"], index=1
                        
                )  
            
            st.text(' ')

        st.header('üìã Valoraci√≥n final')
        valoracion = st.text_area(
            "Valoraci√≥n final: ",key="valoracion"
            " ",
            )
        st.text(' ')

        col1,col2 = st.columns([1,4])
        with col1:  

            revaluar = st.radio(
                        "Revalorar: ",
                        options=["S√≠", "No"], index=1
                        
                ) 
        with col2: 
            if revaluar == "S√≠":
                st.markdown("üîÑ **Revalorar al ni√±o/a**")
            else:
                st.markdown("‚úÖ **No requiere revaluaci√≥n**")


        if st.button("Guardar registro"):
            # try: 
            #         # foto
            #     save_path = "fotos"  
            #     if not os.path.exists(save_path):
            #         os.makedirs(save_path)  # Crear la ruta si no existe
                    
            #         # Guardar la imagen con su nombre original
            #     image.save(os.path.join(save_path, uploaded_file.name))
            #     #st.success("Los cambios se han guardado correctamente.")

            #         # datos
            # except: 
            #     st.warning('No se pudieron guardar los cambios, a√±ada la foto correctamente.', icon="‚ö†Ô∏è")
            
            new_data = {
                'Revaluar': revaluar,  # No coincide, se queda igual
                'A√±o': 2025,  # Coincide con columna
                'Nombre': nombre,  # Coincide con columna
                'Sexo': sexo,  # Coincide con columna
                'Hogar': hogar,  # Coincide con columna
                'Edad': edad,  # Coincide con columna
                'Fecha de nacimiento': nacimiento,  # Coincide con columna
                'Unidad Familiar': unidad_familiar,  # Coincide con columna
                'Antecedentes M√©dicos': a_medicos,  # Coincide con columna
                'Antecedentes Familiares': a_familiares,  # Coincide con columna
                'Medicaci√≥n': medicacion,  # Coincide con columna
                'Alergias': alergias,  # Coincide con columna
                'Comentarios Alergias': comentarios_alergias,  # No coincide, se queda igual
                'Comentarios Medicaci√≥n': comentarios_medicacion,  # No coincide, se queda igual
                'Menarquia': menarquia,  # Coincide con columna
                'Comentarios Menarqu√≠a': comentarios_menarquia,  # No coincide, se queda igual
                'Peso (Kg)': peso,  # Coincide con columna
                'Talla (Cm)': talla,  # Coincide con columna
                'IMC': imc,  # Coincide con columna
                'Per√≠metro Branquial': perimetro_b,  # Coincide con columna
                'Genitales':genitales,
                'Comentarios Genitales':comentarios_genitales, 
                'Vacunas': vacunas,  # No coincide, se queda igual
                'Autoestima/autoimagen': autoestima,  # Coincide con columna
                'Relacional': relacional,  # Coincide con columna
                'Organizaci√≥n': organizacion,  # No coincide, se queda igual
                'Transtorno del sue√±o': insomnio,  # Coincide con columna
                'Ansiedad': ansiedad,  # No coincide, se queda igual
                'Comentarios Psicolog√≠a':comentarios_psicologa,
                'Abuso': abuso,  # No coincide, se queda igual
                'Comentarios Abuso': comentarios_abuso,  # No coincide, se queda igual
                #'Gafas': gafas,  # Coincide con columna
                #'Fecha de Compra Gafas': fecha_compra,  # No coincide, se queda igual
                #'Agudeza visual': agudeza_visual,  # Coincide con columna
                #'Oculomotores': oculomotores,  # Coincide con columna
                'Pendientes y Perforaciones': pendientes,  # Coincide con columna
                'Audici√≥n': audicion,  # Coincide con columna
                'Comentarios Audici√≥n': comentarios_audicion,  # No coincide, se queda igual
                'Otoscopia': otoscopia,  # Coincide con columna
                'Comentarios Otoscopia': comentarios_otoscopia,  # No coincide, se queda igual
                'Caries': bucal,  # Coincide con columna
                'Comentarios Higiene Bucal': comentarios_bucal,  # No coincide, se queda igual
                'Coraz√≥n': cardiaca,  # Coincide con columna
                'Comentarios Cardiaca': comentarios_cardiaca,  # No coincide, se queda igual
                'Pulm√≥n': pulmon,  # Coincide con columna
                'Comentarios Pulm√≥n': comentarios_pulmon,  # No coincide, se queda igual
                'Adams': adams,  # Coincide con columna
                'Comentarios Adams': comentarios_adams,  # No coincide, se queda igual
                'Abdomen': abdomen,  # Coincide con columna
                'Comentarios Abdomen': comentarios_abdomen,  # No coincide, se queda igual
                'Piojos': piojos,  # Coincide con columna
                'Piel': piel,
                'Lesiones': patologias,  # Coincide con columna
                'Tatuajes': tatuajes,  # Coincide con columna
                'Observaciones': valoracion,  # Coincide con columna
                
                'Oftalmolog√≠a':ofta,
                'Comentarios Oftalmolog√≠a': comentarios_oftalmo, 
                'Alimentaci√≥n':alimentacion, 
                'Estado An√≠mico':estado_a,
                'Ideaci√≥n Autom√≠tica':ideacion,
                'Urgente':urgente

            }


        # Convertir el diccionario a DataFrame
            new_row = pd.DataFrame(new_data, index=[0])
        
        # Concatenar con el DataFrame existente
            data = pd.concat([data, new_row], ignore_index=True)
    
            data.to_excel('ni√±os_prep.xlsx', index=False)
            st.success("Los cambios se han guardado correctamente.")

    elif menu_seleccion == "existente":
        
        ni√±x = data[(data['A√±o'] == 2024)]
        nombres_ex=ni√±x['Nombre'].unique()
        opcion = st.sidebar.selectbox(
        "Elige un/a Ni√±@: ", # refinar esto con Misael
        nombres_ex
        )

        ni√±x = ni√±x[(ni√±x['Nombre'] == opcion)]
        if not ni√±x.empty: 
            try: 
                
                with col2:
                    # print(ni√±x['Edad'].values[0])
                    st.write(f"""
                        #  {opcion}
                        """)
                    st.write(f"""
                        {ni√±x['Sexo'].values[0]}, {int(ni√±x['Edad'].values[0]+1)} a√±os, nacid@ en {int(ni√±x['Fecha de nacimiento'].values[0])}
                        """)
                
                st.markdown('‚ö†Ô∏è Las celdas que aparecen escritas contienen registros del a√±o anterior, pero se pueden modificar ‚ö†Ô∏è')

                st.header('üåü Datos Personales')

                nombre = ni√±x['Nombre'].values[0]
                sexo = ni√±x['Sexo'].values[0]
                edad=ni√±x['Edad'].values[0]+1
                nacimiento=ni√±x['Fecha de nacimiento'].values[0]
            except:
                with col2:
                    # print(ni√±x['Edad'].values[0])
                    st.write(f"""
                        #  {opcion}
                        """)
                    st.write(f"""
                        {ni√±x['Sexo'].values[0]}
                        """)
                
                st.markdown('‚ö†Ô∏è Las celdas que aparecen escritas contienen registros del a√±o anterior, pero se pueden modificar ‚ö†Ô∏è')

                st.header('üåü Datos Personales')

                nombre = ni√±x['Nombre'].values[0]
                sexo = ni√±x['Sexo'].values[0]
                st.text(' ')
                st.markdown('‚ö†Ô∏è Porfavor a√±ade la edad del ni√±@ ‚ö†Ô∏è')
                col1,col2,col3 = st.columns([1, 0.1,1])
                with col1:
                    edad=st.number_input('Edad: ', step=1,format="%d")
                with col3:
                    nacimiento=st.slider("Fecha de nacimiento: ", 2017, 2024, 2025-edad)    
                
                st.text(' ')
            
            st.text(' ')
                    
            hogar = st.text_input(
                        "Hogar: " ,key="hogar", value=ni√±x['Hogar'].values[0]
                    )

            st.text(' ')

            unidad_familiar = st.text_input(
                        "Unidad Familiar: ",key="unidad_familiar", value=ni√±x['Unidad Familiar'].values[0]
            )
            
            # st.text(' ')

            # uploaded_file = st.file_uploader("Sube una foto:", type=["jpg", "jpeg", "png"])
            # st.caption("‚ö†Ô∏è El nombre de la foto debe de corresponder con el nombre del ni√±o/a.")


            # if uploaded_file is not None:
            #     image = Image.open(uploaded_file)
                    
            #     st.image(image, caption="Foto subida", width=150)

            #     with open("foto_subida.jpg", "wb") as f:
            #         f.write(uploaded_file.getbuffer())
                
            st.text(' ')

            st.header('üè† Historia cl√≠nica y antecedentes')
            if ni√±x['Antecedentes M√©dicos'].values[0]== 'N/A':
                a_medicos = st.text_area(
                    "Antecedentes m√©dicos: ",key="a_medicos"
                    
                    )
            else:
                a_medicos = st.text_area(
                    "Antecedentes m√©dicos: ",key="a_medicos", value=ni√±x['Antecedentes M√©dicos'].values[0]
                    
                    )
            
            
            st.text(' ')

            if ni√±x['Antecedentes Familiares'].values[0]== 'N/A':
                a_familiares = st.text_area(
                    "Antecedentes familiares: ", key="a_familiares"
                    
                )

            else:
                a_familiares = st.text_area(
                    "Antecedentes familiares: ", key="a_familiares", value=ni√±x['Antecedentes Familiares'].values[0]
                    
                )
            st.text(' ')

            col1,col2 = st.columns([1,4])
            with col1:  
                alergias = st.radio(
                        "Alergias:",
                        options=["S√≠", "No"],  index=1
                        
                )  
                    
            with col2:
                if ni√±x['Alergias'].values[0]== 'N/A':
                    comentarios_alergias = st.text_input(
                            "Comentarios acerca de las alergias: ", key="alergias"
                    )
                else:
                    comentarios_alergias = st.text_input(
                            "Comentarios acerca de las alergias: ", key="alergias",  value=ni√±x['Alergias'].values[0]
                    )
                st.text(' ')

            col1,col2 = st.columns([1,4])
            with col1:  
                medicacion = st.radio(
                        "Medicaci√≥n:",
                        options=["S√≠", "No"],  index=1
                        
                )  
                    
            with col2:
                if ni√±x['Medicaci√≥n'].values[0]=='N/A':
                    comentarios_medicacion = st.text_input(
                        "Comentarios acerca de la medicaci√≥n: ", key="medicacion"
                    )   
                
                else:
                    comentarios_medicacion = st.text_input(
                            "Comentarios acerca de la medicaci√≥n: ", key="medicacion", value=ni√±x['Medicaci√≥n'].values[0]
                    )

            st.text(' ')
            if sexo=='Femenino':
                col1,col2 = st.columns([1,4])
                with col1:  
                    menarquia = st.radio(
                            "Menarquia:",
                            options=["S√≠", "No"],
                            
                    )  
                        
                with col2:
                    comentarios_menarquia = st.text_input(
                            "Comentarios acerca de la menarquia: ", key="menarquia"
                    )
            else: 
                menarquia='N/A'
                comentarios_menarquia='N/A'
                
            st.text(' ')

            st.header('üìè Antropometr√≠a y crecimiento')
            col1,col2, col3= st.columns([3,3,3])
            with col1:  
                peso=st.number_input('Peso (kg): ', step=0.1, key='peso' )

                    
            with col2:
                talla=st.number_input('Talla (cm): ', step=1, key='talla' )
                
            with col3:
                altura_m = talla / 100
                st.text(f'√çndice de masa corporal: ')
                if peso==0 or talla==0:
                    imc='N/A'
                else: 
                    imc=round(peso / (altura_m ** 2), 2)
                st.markdown(f'{imc}')

            perimetro_b=st.number_input('Per√≠metro branquial: ', step=0.1, key='perimetro_b' )
            
            col1,col2 = st.columns([1,4])
            with col1:  
                genitales = st.radio(
                        "Genitales:",
                        options=["Normales", "Hallazgo"],
                        
                )  
            if genitales=='Hallazgo':   
                with col2:
                    comentarios_genitales = st.text_input(
                            "Comentarios acerca de los genitales: ", key="genitales"
                    )
            else:
                comentarios_genitales='N/A'
            
            st.text(' ')
            st.header('üíâ Vacunas')
            st.text(' ')

            vacunas = st.text_area(
                "Vacunas: ",key="vacunas"
                " ",
                )
            st.text(' ')
            st.text(' ')

            st.header('üß† Psicolog√≠a y Comportamiento')
            st.text(' ')

            if edad>11:
                st.markdown('Nivel de autoestima: ')
                autoestima=st_star_rating(label='',maxValue = 5, defaultValue = 3, key = "autoestima", emoticons=True)

                st.markdown('Nivel de relacionalidad: ')
                relacional=st_star_rating(label='',maxValue = 5, defaultValue = 3, key = "relacional", emoticons=True)

                st.markdown('Nivel de organizaci√≥n: ')
                organizacion=st_star_rating(label='',maxValue = 5, defaultValue = 3, key = "organizacion", emoticons=True)

                st.markdown('Trastorno del sue√±o: ')
                insomnio=st_star_rating(label='',maxValue = 5, defaultValue = 3, key = "insomnio", emoticons=True)

                st.markdown('Nivel de ansiedad: ')
                ansiedad=st_star_rating(label='',maxValue = 5, defaultValue = 3, key = "ansiedad", emoticons=True)

                st.markdown('Alimentaci√≥n: ')
                alimentacion=st_star_rating(label='',maxValue = 5, defaultValue = 3, key = "alimentacion", emoticons=True)

                st.markdown('Estado An√≠mico: ')
                estado_a=st_star_rating(label='',maxValue = 5, defaultValue = 3, key = "estado_a", emoticons=True)

                st.markdown('Ideaci√≥n Autol√≠tica: ')
                ideacion=st_star_rating(label='',maxValue = 5, defaultValue = 3, key = "ideacion", emoticons=True)
            else: 
                autoestima='N/A'
                relacional='N/A'
                organizacion='N/A'
                insomnio='N/A'
                ansiedad='N/A'
                alimentacion='N/A'        
                estado_a='N/A'
                ideacion='N/A'
                
            col1,col2 = st.columns([1,4])
            with col1:  
                abuso = st.radio(
                        "Abuso:",
                        options=["S√≠", "No", "N/A"], index=2
                        
                )  
                    
            with col2:
                comentarios_abuso = st.text_input(
                        "Comentarios: ", key="comentarios_abuso"
                )
                
            st.text(' ')

            comentarios_psicologa = st.text_area(
                    "Comentarios psic√≥loga/o: ", key="comentarios_psicologa"
                    " ",
            )
            st.text(' ')

            st.header('üëÅÔ∏è Oftalmolog√≠a')
            st.text(' ')
            col1,col2 = st.columns([1,4])
            # with col1:  
            ofta = st.radio(
                    "Revisado:",
                    options=["S√≠", "No"],
                    
            )  

            if ofta == 'No':
                with col2:
                    comentarios_oftalmo = st.text_input(
                        "Comentarios oftalmolog√≠a: ", key="comentarios_oftalmo"
                )        
            else:
                comentarios_oftalmo='N/A'

            st.header('üëÇ Otorrino')
            st.text(' ')
            pendientes = st.radio(
                        "Pendientes: ",
                        options=["S√≠", "No", "N/A"],
                        
                ) 
            col1,col2 = st.columns([1,4])
            with col1:  
                audicion = st.radio(
                        "Audicici√≥n: ",
                        options=["Correcta", "Sordera"],
                        
                )  
            if audicion == 'Sordera':
                
                with col2:
                    comentarios_audicion = st.text_input(
                            "Comentarios acerca de la audici√≥n: ", key="comentarios_audicion"
                    )
            else: 
                comentarios_audicion='N/A'

            col1,col2 = st.columns([1,4])
            with col1:  
                otoscopia = st.radio(
                        "Otoscopia: ",
                        options=["Correcta", "Tap√≥n"],
                        
                )  
            if otoscopia == 'Tap√≥n':
                
                with col2:
                    comentarios_otoscopia = st.text_input(
                            "Comentarios acerca de la otoscopia: ", key="comentarios_otoscopia"
                    )
            else: 
                comentarios_otoscopia='N/A'

            st.text(' ')

            st.header('ü¶∑ Bucal')
            st.text(' ')

            col1,col2,col3 = st.columns([1.5,3,1.5])
            with col1:  
                bucal = st.radio(
                        "Bucal: ",
                        options=["Buena higiene bucal", "Caries"],
                        
                )  
            with col2:
                comentarios_bucal = st.text_input(
                            "Comentarios acerca de la higiene bucal: ", key="comentarios_bucal"
                    )
                
            with col3:
                urgente = st.radio(
                        "Urgente: ",
                        options=["S√≠", "No"], index=1
                        
                ) 
            
            st.text(' ')

            st.header('ü´Ä Auscultaci√≥n')
            st.text(' ')
            col1,col2 = st.columns([1,4])
            with col1:  
                cardiaca = st.radio(
                        "Cardiaca: ",
                        options=["Correcta", "Hallazgo"],
                        
                )  
            if cardiaca == 'Hallazgo':
                
                with col2:
                    comentarios_cardiaca = st.text_input(
                            "Comentarios acerca de la auscultaci√≥n cardiaca: ", key="comentarios_cardiaca"
                    )
            else: 
                comentarios_cardiaca='N/A'

            st.text(' ')
            col1,col2 = st.columns([1,4])
            with col1:  
                pulmon = st.radio(
                        "Pulm√≥n: ",
                        options=["Correcto", "Hallazgo"],
                        
                )  
            if pulmon == 'Hallazgo':
                
                with col2:
                    comentarios_pulmon = st.text_input(
                            "Comentarios acerca de los pulmones: ", key="comentarios_pulmon"
                    )
            else: 
                comentarios_pulmon='N/A'

            st.text(' ')
            col1,col2 = st.columns([1,4])
            with col1:  
                adams = st.radio(
                        "Adams: ",
                        options=["Negativo", "Positivo"],
                        
                )  
            if adams == 'Negativo':
                
                with col2:
                    comentarios_adams = st.text_input(
                            "Comentarios Adams: ", key="comentarios_adams"
                    )
            else: 
                comentarios_adams='N/A'

            st.header('üñêÔ∏è Dermatolog√≠a')

            st.text(' ')
            col1,col2 = st.columns([1,4])
            with col1:  
                abdomen = st.radio(
                        "Abdomen: ",
                        options=["Correcta", "Hallazgo"],
                        
                )  
            if abdomen == 'Hallazgo':
                
                with col2:
                    comentarios_abdomen = st.text_input(
                            "Comentarios acerca de la auscultaci√≥n cardiaca: ", key="comentarios_abdomen"
                    )
            else: 
                comentarios_abdomen='N/A'


            st.text(' ')
            col1,col2 = st.columns([1,4])
            with col1:  
                piel = st.radio(
                        "Piel: ",
                        options=["Correcta", "Hallazgo"],
                        
                )  
            if piel == 'Hallazgo':
                col11,col12 = st.columns([4,1])
                
                with col11:
                    patologias = st.text_input(
                            "Patolog√≠as: ", key="patlogias"
                    )
            else: 
                patologias='N/A'
            
            col13,col23 = st.columns([3,3])
            with col13:
                tatuajes = st.radio(
                            "Tatuajes: ",
                            options=["S√≠", "No"], index=1
                            
                    )  
                    
            st.text(' ')
            with col23:
                piojos = st.radio(
                            "Piojos: ",
                            options=["S√≠", "No"], index=1
                            
                    )  
                
            
            st.text(' ')

            st.header('üìã Valoraci√≥n final')
            valoracion = st.text_area(
                "Valoraci√≥n final: ",key="valoracion"
                " ",
                )
            st.text(' ')

            col1,col2 = st.columns([1,4])
            with col1:  

                revaluar = st.radio(
                            "Revalorar: ",
                            options=["S√≠", "No"], index=1
                            
                    ) 
            with col2: 
                if revaluar == "S√≠":
                    st.markdown("üîÑ **Revalorar al ni√±o/a**")
                else:
                    st.markdown("‚úÖ **No requiere revaluaci√≥n**")


            if st.button("Guardar registro"):
            #     try: 
            #             # foto
            #         save_path = "fotos"  
            #         if not os.path.exists(save_path):
            #             os.makedirs(save_path)  # Crear la ruta si no existe
                        
            #             # Guardar la imagen con su nombre original
            #         image.save(os.path.join(save_path, uploaded_file.name))
            #         #st.success("Los cambios se han guardado correctamente.")

            #             # datos
            #     except: 
            #         st.warning('No se pudieron guardar los cambios, a√±ada la foto correctamente.', icon="‚ö†Ô∏è")
                
                new_data = {
                    'Revaluar': revaluar,  # No coincide, se queda igual
                    'A√±o': 2025,  # Coincide con columna
                    'Nombre': nombre,  # Coincide con columna
                    'Sexo': sexo,  # Coincide con columna
                    'Hogar': hogar,  # Coincide con columna
                    'Edad': edad,  # Coincide con columna
                    'Fecha de nacimiento': nacimiento,  # Coincide con columna
                    'Unidad Familiar': unidad_familiar,  # Coincide con columna
                    'Antecedentes M√©dicos': a_medicos,  # Coincide con columna
                    'Antecedentes Familiares': a_familiares,  # Coincide con columna
                    'Medicaci√≥n': medicacion,  # Coincide con columna
                    'Alergias': alergias,  # Coincide con columna
                    'Comentarios Alergias': comentarios_alergias,  # No coincide, se queda igual
                    'Comentarios Medicaci√≥n': comentarios_medicacion,  # No coincide, se queda igual
                    'Menarquia': menarquia,  # Coincide con columna
                    'Comentarios Menarqu√≠a': comentarios_menarquia,  # No coincide, se queda igual
                    'Peso (Kg)': peso,  # Coincide con columna
                    'Talla (Cm)': talla,  # Coincide con columna
                    'IMC': imc,
                    'Per√≠metro Branquial': perimetro_b,  # Coincide con columna
                    'Genitales':genitales,
                    'Comentarios Genitales':comentarios_genitales, 
                    'Vacunas': vacunas,  # No coincide, se queda igual
                    'Autoestima/autoimagen': autoestima,  # Coincide con columna
                    'Relacional': relacional,  # Coincide con columna
                    'Organizaci√≥n': organizacion,  # No coincide, se queda igual
                    'Transtorno del sue√±o': insomnio,  # Coincide con columna
                    'Ansiedad': ansiedad,  # No coincide, se queda igual
                    'Comentarios Psicolog√≠a':comentarios_psicologa,
                    'Abuso': abuso,  # No coincide, se queda igual
                    'Comentarios Abuso': comentarios_abuso,  # No coincide, se queda igual
                    #'Gafas': gafas,  # Coincide con columna
                    #'Fecha de Compra Gafas': fecha_compra,  # No coincide, se queda igual
                    #'Agudeza visual': agudeza_visual,  # Coincide con columna
                    #'Oculomotores': oculomotores,  # Coincide con columna
                
                    'Pendientes y Perforaciones': pendientes,  # Coincide con columna
                    'Audici√≥n': audicion,  # Coincide con columna
                    'Comentarios Audici√≥n': comentarios_audicion,  # No coincide, se queda igual
                    'Otoscopia': otoscopia,  # Coincide con columna
                    'Comentarios Otoscopia': comentarios_otoscopia,  # No coincide, se queda igual
                    'Caries': bucal,  # Coincide con columna
                    'Comentarios Higiene Bucal': comentarios_bucal,  # No coincide, se queda igual
                    'Coraz√≥n': cardiaca,  # Coincide con columna
                    'Comentarios Cardiaca': comentarios_cardiaca,  # No coincide, se queda igual
                    'Pulm√≥n': pulmon,  # Coincide con columna
                    'Comentarios Pulm√≥n': comentarios_pulmon,  # No coincide, se queda igual
                    'Adams': adams,  # Coincide con columna
                    'Comentarios Adams': comentarios_adams,  # No coincide, se queda igual
                    'Abdomen': abdomen,  # Coincide con columna
                    'Comentarios Abdomen': comentarios_abdomen,  # No coincide, se queda igual
                    'Piojos': piojos,  # Coincide con columna
                    'Piel': piel,
                    'Lesiones': patologias,  # Coincide con columna
                    'Tatuajes': tatuajes,  # Coincide con columna
                    'Observaciones': valoracion,  # Coincide con columna
                    'Oftalmolog√≠a':ofta,
                    'Comentarios Oftalmolog√≠a': comentarios_oftalmo, 
                    'Alimentaci√≥n':alimentacion,
                    'Estado An√≠mico':estado_a,
                    'Ideaci√≥n Autom√≠tica': ideacion,
                    'Urgente':urgente
                }


            # Convertir el diccionario a DataFrame
                new_row = pd.DataFrame(new_data, index=[0])
            
            # Concatenar con el DataFrame existente
                data = pd.concat([data, new_row], ignore_index=True)
        
                data.to_excel('ni√±os_prep.xlsx', index=False)
                st.success("Los cambios se han guardado correctamente.")
        else:
            st.write('No hay datos disponibles')